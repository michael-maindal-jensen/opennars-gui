//processing sketch, copy into a new Processing sketch and press Run (needs a webcam)
//will become the robot vision

import processing.video.*;

int numPixels;
int[] previousFrame;
Capture video;

void setup() {
  size(640, 480);
  video = new Capture(this, width, height);
  video.start(); 
  numPixels = video.width * video.height;
  previousFrame = new int[numPixels];
  loadPixels();
  smooth(0);
}

int k=0;
void draw() {
  if (video.available())
  {
    k++;
    video.read(); // Read the new frame from the camera
    video.loadPixels(); // Make its pixels[] array available
    
    int movementSum = 0; // Amount of movement in the frame
    PImage still=createImage(640, 480, ARGB);
    for (int i = 0; i < numPixels; i++)
    { // For each pixel in the video frame...
      color currColor = video.pixels[i];
      color prevColor = previousFrame[i];
      // Extract the red, green, and blue components from current pixel
      int currR = (currColor >> 16) & 0xFF; // Like red(), but faster
      int currG = (currColor >> 8) & 0xFF;
      int currB = currColor & 0xFF;
      // Extract red, green, and blue components from previous pixel
      int prevR = (prevColor >> 16) & 0xFF;
      int prevG = (prevColor >> 8) & 0xFF;
      int prevB = prevColor & 0xFF;
      // Compute the difference of the red, green, and blue values
      
      int diffR = abs(currR - prevR);
      int diffG = abs(currG - prevG);
      int diffB = abs(currB - prevB);
      if(!(diffR<30 && diffG<30 && diffB<30))
      {
        diffR=currR;
        diffG=currG;
        diffB=currB;
      }
      // Add these differences to the running tally
      movementSum += diffR + diffG + diffB;
      pixels[i] = 0xff000000 | (diffR << 16) | (diffG << 8) | diffB;
      still.pixels[i]=pixels[i];
      // Save the current color into the 'previous' buffer
      if(k%1==0) //i like it to be continuous thats why its 1
      {
        int mass=10; //mass parameter for continuous backgrounding
        int CR=(mass-1)*prevR, CG=(mass-1)*prevG, CB=(mass-1)*prevB;
        currR=(currR+CR)/mass;
        currG=(currG+CG)/mass;
        currB=(currB+CB)/mass;
        int colnow = 0xff000000 | (currR << 16) | (currG << 8) | currB;
        previousFrame[i] = colnow; //dont update in every step
      }
    }
    // To prevent flicker from frames that are all black (no movement),
    if (movementSum > 0) {
      updatePixels();
      println(movementSum); // Print the total amount of movement to the console
    }
    int s=50; //8
    //still.resize(s,s);
    pushMatrix();
    //scale(640/s,480/s);
    image(still, 0, 0);
    popMatrix();
    
  }
}